#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.12
# from Racc grammer file "".
#

require 'racc/parser.rb'


require_relative "lexer"

require_relative "nodes"

module Sol

class Parser < Racc::Parser

module_eval(<<'...end grammar.y/module_eval...', 'grammar.y', 170)

		# This code will be puts as-is in the Parser class
		def parse(input, show_tokens=true)

			@tokens = Sol::Lexer.new.tokenise(input) # Tokenise the code using our lexer

			puts @tokens.inspect if show_tokens

			do_parse # Kickoff the parsing process

		end

		def next_token

			@tokens.shift

		end

...end grammar.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    23,    22,    68,    16,    13,    15,    17,    18,    19,    20,
    21,    80,    23,    22,    47,    16,    13,    15,    17,    18,
    19,    20,    21,    27,    46,    38,    39,    70,    12,    69,
    14,    65,    27,    79,    38,    39,    36,    37,    44,    42,
    12,    41,    14,    23,    22,    72,    16,    13,    15,    17,
    18,    19,    20,    21,    74,    23,    22,    85,    16,    13,
    15,    17,    18,    19,    20,    21,    70,    43,    82,    23,
    22,    12,    16,    14,    15,    17,    18,    19,    20,    21,
    27,    23,    22,    12,    16,    14,    15,    17,    18,    19,
    20,    21,    27,    23,    22,    24,    16,    12,    15,    17,
    18,    19,    20,    21,    67,    23,    22,   nil,    16,    12,
    15,    17,    18,    19,    20,    21,   nil,    23,    22,   nil,
    16,    12,    15,    17,    18,    19,    20,    21,   nil,    23,
    22,   nil,    16,    12,    15,    17,    18,    19,    20,    21,
   nil,    23,    22,   nil,    16,    12,    15,    17,    18,    19,
    20,    21,   nil,    23,    22,   nil,    16,    12,    15,    17,
    18,    19,    20,    21,   nil,    23,    22,   nil,    16,    12,
    15,    17,    18,    19,    20,    21,   nil,    23,    22,   nil,
    16,    12,    15,    17,    18,    19,    20,    21,   nil,    23,
    22,   nil,    16,    12,    15,    17,    18,    19,    20,    21,
   nil,    23,    22,   nil,    16,    12,    15,    17,    18,    19,
    20,    21,   nil,    23,    22,   nil,    16,    12,    15,    17,
    18,    19,    20,    21,   nil,    23,    22,   nil,    16,    12,
    15,    17,    18,    19,    20,    21,   nil,    23,    22,   nil,
    16,    12,    15,    17,    18,    19,    20,    21,   nil,    23,
    22,   nil,    16,    12,    15,    17,    18,    19,    20,    21,
   nil,    23,    22,   nil,    16,    12,    15,    17,    18,    19,
    20,    21,   nil,    23,    22,   nil,    16,    12,    15,    17,
    18,    19,    20,    21,   nil,    23,    22,   nil,    16,    12,
    15,    17,    18,    19,    20,    21,   nil,    23,    22,   nil,
    16,    12,    15,    17,    18,    19,    20,    21,   nil,    23,
    22,   nil,    16,    12,    15,    17,    18,    19,    20,    21,
    27,   nil,    38,    39,    27,    12,    38,    39,    36,    37,
    32,    33,    34,    35,    30,    31,    27,    12,    38,    39,
    36,    37,    32,    33,    34,    35,    30,    31,    29,    28,
    27,   nil,    38,    39,    36,    37,    27,    87,    38,    39,
    36,    37,    32,    33,    34,    35,    30,    31,    29,    28,
    27,   nil,    38,    39,    36,    37,    27,    91,    38,    39,
    36,    37,    32,    33,    34,    35,    30,    31,    29,    28,
    78,   nil,    77,    84,    67,    27,    67,    38,    39,    36,
    37,    32,    33,    34,    35,    30,    31,    29,    28,    89,
    90,    27,    60,    38,    39,    36,    37,    32,    33,    34,
    35,    30,    31,    29,    28,    27,   nil,    38,    39,    36,
    37,    32,    33,    34,    35,    30,    31,    29,    28,    27,
   nil,    38,    39,    36,    37,    32,    33,    34,    35,    30,
    31,    29,    28,    27,   nil,    38,    39,    36,    37,    32,
    33,    34,    35,    30,    31,    29,    28,    27,   nil,    38,
    39,    36,    37,    32,    33,    34,    35,    30,    31,    29,
    28,    27,   nil,    38,    39,    36,    37,    32,    33,    34,
    35,    30,    31,    29,    28,    27,   nil,    38,    39,    36,
    37,    32,    33,    34,    35,    30,    31,    29,    27,   nil,
    38,    39,    36,    37,    32,    33,    34,    35,    27,   nil,
    38,    39,    36,    37,    32,    33,    34,    35,    27,   nil,
    38,    39,    36,    37 ]

racc_action_check = [
    73,    73,    47,    73,    73,    73,    73,    73,    73,    73,
    73,    73,     2,     2,    27,     2,     2,     2,     2,     2,
     2,     2,     2,    56,    24,    56,    56,    61,    73,    61,
    73,    44,    54,    73,    54,    54,    54,    54,    22,    20,
     2,    20,     2,    67,    67,    65,    67,    67,    67,    67,
    67,    67,    67,    67,    67,     0,     0,    78,     0,     0,
     0,     0,     0,     0,     0,     0,    75,    21,    75,    28,
    28,    67,    28,    67,    28,    28,    28,    28,    28,    28,
    59,    70,    70,     0,    70,     0,    70,    70,    70,    70,
    70,    70,    58,    80,    80,     1,    80,    28,    80,    80,
    80,    80,    80,    80,    88,    43,    43,   nil,    43,    70,
    43,    43,    43,    43,    43,    43,   nil,    23,    23,   nil,
    23,    80,    23,    23,    23,    23,    23,    23,   nil,    74,
    74,   nil,    74,    43,    74,    74,    74,    74,    74,    74,
   nil,    42,    42,   nil,    42,    23,    42,    42,    42,    42,
    42,    42,   nil,    68,    68,   nil,    68,    74,    68,    68,
    68,    68,    68,    68,   nil,    12,    12,   nil,    12,    42,
    12,    12,    12,    12,    12,    12,   nil,    29,    29,   nil,
    29,    68,    29,    29,    29,    29,    29,    29,   nil,    30,
    30,   nil,    30,    12,    30,    30,    30,    30,    30,    30,
   nil,    31,    31,   nil,    31,    29,    31,    31,    31,    31,
    31,    31,   nil,    32,    32,   nil,    32,    30,    32,    32,
    32,    32,    32,    32,   nil,    41,    41,   nil,    41,    31,
    41,    41,    41,    41,    41,    41,   nil,    34,    34,   nil,
    34,    32,    34,    34,    34,    34,    34,    34,   nil,    35,
    35,   nil,    35,    41,    35,    35,    35,    35,    35,    35,
   nil,    36,    36,   nil,    36,    34,    36,    36,    36,    36,
    36,    36,   nil,    37,    37,   nil,    37,    35,    37,    37,
    37,    37,    37,    37,   nil,    38,    38,   nil,    38,    36,
    38,    38,    38,    38,    38,    38,   nil,    39,    39,   nil,
    39,    37,    39,    39,    39,    39,    39,    39,   nil,    33,
    33,   nil,    33,    38,    33,    33,    33,    33,    33,    33,
    57,   nil,    57,    57,    49,    39,    49,    49,    49,    49,
    49,    49,    49,    49,    49,    49,    81,    33,    81,    81,
    81,    81,    81,    81,    81,    81,    81,    81,    81,    81,
    53,   nil,    53,    53,    53,    53,    86,    81,    86,    86,
    86,    86,    86,    86,    86,    86,    86,    86,    86,    86,
    55,   nil,    55,    55,    55,    55,    45,    86,    45,    45,
    45,    45,    45,    45,    45,    45,    45,    45,    45,    45,
    71,   nil,    71,    77,    77,    40,    45,    40,    40,    40,
    40,    40,    40,    40,    40,    40,    40,    40,    40,    84,
    84,    76,    40,    76,    76,    76,    76,    76,    76,    76,
    76,    76,    76,    76,    76,     3,   nil,     3,     3,     3,
     3,     3,     3,     3,     3,     3,     3,     3,     3,    25,
   nil,    25,    25,    25,    25,    25,    25,    25,    25,    25,
    25,    25,    25,    62,   nil,    62,    62,    62,    62,    62,
    62,    62,    62,    62,    62,    62,    62,    63,   nil,    63,
    63,    63,    63,    63,    63,    63,    63,    63,    63,    63,
    63,    64,   nil,    64,    64,    64,    64,    64,    64,    64,
    64,    64,    64,    64,    64,    48,   nil,    48,    48,    48,
    48,    48,    48,    48,    48,    48,    48,    48,    50,   nil,
    50,    50,    50,    50,    50,    50,    50,    50,    51,   nil,
    51,    51,    51,    51,    51,    51,    51,    51,    52,   nil,
    52,    52,    52,    52 ]

racc_action_pointer = [
    53,    95,    10,   411,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   163,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    11,    39,    27,   115,    24,   425,   nil,     3,    67,   175,
   187,   199,   211,   307,   235,   247,   259,   271,   283,   295,
   381,   223,   139,   103,     1,   362,   nil,   -28,   481,   310,
   494,   504,   514,   336,    18,   356,     9,   306,    78,    66,
   nil,    -2,   439,   453,   467,    34,   nil,    41,   151,   nil,
    79,   361,   nil,    -2,   127,    37,   397,   360,    46,   nil,
    91,   322,   nil,   nil,   405,   nil,   342,   nil,    70,   nil,
   nil,   nil,   nil ]

racc_action_default = [
    -1,   -53,    -2,    -3,    -6,    -7,    -8,    -9,   -10,   -11,
   -12,   -13,   -53,   -15,   -16,   -17,   -18,   -19,   -20,   -21,
   -53,   -39,   -53,   -53,   -53,    -4,    -5,   -53,   -53,   -53,
   -53,   -53,   -53,   -53,   -53,   -53,   -53,   -53,   -53,   -53,
   -53,   -24,   -53,   -53,   -53,   -53,    93,   -53,   -27,   -28,
   -29,   -30,   -31,   -32,   -33,   -34,   -35,   -36,   -37,   -38,
   -14,   -53,   -25,   -40,   -41,   -44,   -49,   -53,   -24,   -22,
   -53,   -53,   -45,   -53,   -53,   -53,   -26,   -53,   -53,   -50,
   -53,   -53,   -23,   -42,   -53,   -46,   -53,   -52,   -53,   -47,
   -48,   -51,   -43 ]

racc_goto_table = [
    25,     1,    26,     2,    71,    88,    66,   nil,   nil,   nil,
    40,   nil,   nil,   nil,   nil,    61,   nil,   nil,   nil,   nil,
   nil,    45,   nil,   nil,   nil,   nil,    48,    49,    50,    51,
    52,    53,    54,    55,    56,    57,    58,    59,    83,    62,
    63,    64,    75,   nil,   nil,   nil,   nil,   nil,   nil,    92,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    62,   nil,    76,   nil,
    73,    25,    81,    26,   nil,   nil,   nil,   nil,    86 ]

racc_goto_check = [
     3,     1,     4,     2,    13,    15,    14,   nil,   nil,   nil,
     3,   nil,   nil,   nil,   nil,    12,   nil,   nil,   nil,   nil,
   nil,     3,   nil,   nil,   nil,   nil,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     3,     3,     3,    14,     3,
     3,     3,    12,   nil,   nil,   nil,   nil,   nil,   nil,    14,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,     3,   nil,     3,   nil,
     2,     3,     3,     4,   nil,   nil,   nil,   nil,     3 ]

racc_goto_pointer = [
   nil,     1,     3,    -2,     0,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   -26,   -61,   -39,   -79 ]

racc_goto_default = [
   nil,   nil,   nil,     3,     4,     5,     6,     7,     8,     9,
    10,    11,   nil,   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 37, :_reduce_1,
  1, 37, :_reduce_2,
  1, 38, :_reduce_3,
  2, 38, :_reduce_4,
  2, 38, :_reduce_5,
  1, 38, :_reduce_6,
  1, 39, :_reduce_none,
  1, 39, :_reduce_none,
  1, 39, :_reduce_none,
  1, 39, :_reduce_none,
  1, 39, :_reduce_none,
  1, 39, :_reduce_none,
  1, 39, :_reduce_none,
  3, 39, :_reduce_14,
  1, 40, :_reduce_none,
  1, 40, :_reduce_none,
  1, 41, :_reduce_17,
  1, 41, :_reduce_18,
  1, 41, :_reduce_19,
  1, 41, :_reduce_20,
  1, 41, :_reduce_21,
  4, 42, :_reduce_22,
  6, 42, :_reduce_23,
  0, 48, :_reduce_24,
  1, 48, :_reduce_25,
  3, 48, :_reduce_26,
  3, 43, :_reduce_27,
  3, 43, :_reduce_28,
  3, 43, :_reduce_29,
  3, 43, :_reduce_30,
  3, 43, :_reduce_31,
  3, 43, :_reduce_32,
  3, 43, :_reduce_33,
  3, 43, :_reduce_34,
  3, 43, :_reduce_35,
  3, 43, :_reduce_36,
  3, 43, :_reduce_37,
  3, 43, :_reduce_38,
  1, 44, :_reduce_39,
  3, 45, :_reduce_40,
  3, 45, :_reduce_41,
  6, 46, :_reduce_42,
  8, 46, :_reduce_43,
  0, 49, :_reduce_none,
  1, 49, :_reduce_45,
  3, 49, :_reduce_46,
  1, 51, :_reduce_47,
  1, 51, :_reduce_48,
  3, 47, :_reduce_49,
  3, 50, :_reduce_50,
  5, 50, :_reduce_51,
  4, 50, :_reduce_52 ]

racc_reduce_n = 53

racc_shift_n = 93

racc_token_table = {
  false => 0,
  :error => 1,
  :IF => 2,
  :FUNC => 3,
  :INT => 4,
  :STRING => 5,
  :NEWLINE => 6,
  :NUMBER => 7,
  :TRUE => 8,
  :FALSE => 9,
  :NULL => 10,
  :IDENTIFIER => 11,
  :CONSTANT => 12,
  :RETURN => 13,
  "." => 14,
  "!" => 15,
  "*" => 16,
  "/" => 17,
  "+" => 18,
  "-" => 19,
  ">" => 20,
  ">=" => 21,
  "<" => 22,
  "<=" => 23,
  "==" => 24,
  "!=" => 25,
  "&&" => 26,
  "||" => 27,
  "=" => 28,
  "," => 29,
  "(" => 30,
  ")" => 31,
  ";" => 32,
  "->" => 33,
  "{" => 34,
  "}" => 35 }

racc_nt_base = 36

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "IF",
  "FUNC",
  "INT",
  "STRING",
  "NEWLINE",
  "NUMBER",
  "TRUE",
  "FALSE",
  "NULL",
  "IDENTIFIER",
  "CONSTANT",
  "RETURN",
  "\".\"",
  "\"!\"",
  "\"*\"",
  "\"/\"",
  "\"+\"",
  "\"-\"",
  "\">\"",
  "\">=\"",
  "\"<\"",
  "\"<=\"",
  "\"==\"",
  "\"!=\"",
  "\"&&\"",
  "\"||\"",
  "\"=\"",
  "\",\"",
  "\"(\"",
  "\")\"",
  "\";\"",
  "\"->\"",
  "\"{\"",
  "\"}\"",
  "$start",
  "Root",
  "Expressions",
  "Expression",
  "Terminator",
  "Literal",
  "Call",
  "Operator",
  "Constant",
  "Assign",
  "Func",
  "If",
  "ArgList",
  "ParamList",
  "Block",
  "Types" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'grammar.y', 43)
  def _reduce_1(val, _values, result)
     result = Nodes.new([]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 44)
  def _reduce_2(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 49)
  def _reduce_3(val, _values, result)
     result = Nodes.new(val) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 50)
  def _reduce_4(val, _values, result)
     result = val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 52)
  def _reduce_5(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 53)
  def _reduce_6(val, _values, result)
     result = Nodes.new([]) 
    result
  end
.,.,

# reduce 7 omitted

# reduce 8 omitted

# reduce 9 omitted

# reduce 10 omitted

# reduce 11 omitted

# reduce 12 omitted

# reduce 13 omitted

module_eval(<<'.,.,', 'grammar.y', 65)
  def _reduce_14(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 15 omitted

# reduce 16 omitted

module_eval(<<'.,.,', 'grammar.y', 76)
  def _reduce_17(val, _values, result)
     result = NumberNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 77)
  def _reduce_18(val, _values, result)
     result = StringNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 78)
  def _reduce_19(val, _values, result)
     result = TrueNode.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 79)
  def _reduce_20(val, _values, result)
     result = FalseNode.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 80)
  def _reduce_21(val, _values, result)
     result = NullNode.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 88)
  def _reduce_22(val, _values, result)
     result = CallNode.new(nil, val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 92)
  def _reduce_23(val, _values, result)
     result = CallNode.new(val[0], val[2], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 96)
  def _reduce_24(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 97)
  def _reduce_25(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 98)
  def _reduce_26(val, _values, result)
     result = val[0] << val[2]
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 103)
  def _reduce_27(val, _values, result)
     result = CallNode.new(val[0], val[1], [val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 104)
  def _reduce_28(val, _values, result)
     result = CallNode.new(val[0], val[1], [val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 105)
  def _reduce_29(val, _values, result)
     result = CallNode.new(val[0], val[1], [val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 106)
  def _reduce_30(val, _values, result)
     result = CallNode.new(val[0], val[1], [val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 107)
  def _reduce_31(val, _values, result)
     result = CallNode.new(val[0], val[1], [val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 108)
  def _reduce_32(val, _values, result)
     result = CallNode.new(val[0], val[1], [val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 109)
  def _reduce_33(val, _values, result)
     result = CallNode.new(val[0], val[1], [val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 110)
  def _reduce_34(val, _values, result)
     result = CallNode.new(val[0], val[1], [val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 111)
  def _reduce_35(val, _values, result)
     result = CallNode.new(val[0], val[1], [val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 112)
  def _reduce_36(val, _values, result)
     result = CallNode.new(val[0], val[1], [val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 113)
  def _reduce_37(val, _values, result)
     result = CallNode.new(val[0], val[1], [val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 114)
  def _reduce_38(val, _values, result)
     result = CallNode.new(val[0], val[1], [val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 118)
  def _reduce_39(val, _values, result)
     result = GetConstantNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 123)
  def _reduce_40(val, _values, result)
     result = SetLocalNode.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 124)
  def _reduce_41(val, _values, result)
     result = SetLocalNode.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 130)
  def _reduce_42(val, _values, result)
     result = FuncNode.new(val[1], val[3], val[5]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 132)
  def _reduce_43(val, _values, result)
     result = FuncNode.new(val[1], val[3], val[7]) 
    result
  end
.,.,

# reduce 44 omitted

module_eval(<<'.,.,', 'grammar.y', 137)
  def _reduce_45(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 138)
  def _reduce_46(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 142)
  def _reduce_47(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 143)
  def _reduce_48(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 148)
  def _reduce_49(val, _values, result)
     result = IfNode.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 153)
  def _reduce_50(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 154)
  def _reduce_51(val, _values, result)
     result = ReturnNode.new(val[3])
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 155)
  def _reduce_52(val, _values, result)
     result = ReturnNode.new(val[2]) 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Parser


end # End the module
